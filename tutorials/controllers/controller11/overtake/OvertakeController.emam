package controller11.overtake;

import controller11.atomic.*;

component OvertakeController {
	port                                    
		in Q frontLeftSensor,
        in Q frontRightSensor,
        in Q frontRightSideSensor,
        in Q frontLeftSideSensor,
        in Q backLeftSideSensor,
        in Q backRightSideSensor,
        in B active,
        in B passed,
        out B activatePassChecker,
    	out Q steering;

    /*
        instance ConstantQ(0) const_0;
        instance ConstantQ(1) const_1;
        instance ConstantQ(20) const_20;
        instance ConstantQ(-0.5) const_m05;
        instance ConstantQ(0.5) const_05;
        instance ConstantQ(5) const_5;
        instance ConstantQ(9) const_9;
        instance SwitchQ switch_last;
        instance SwitchQ switch_1;
        instance SwitchQ switch_2;
        instance SwitchQ switch_3;
        instance SwitchQ switch_4;
        instance SwitchQ switch_5;
        instance SwitchQ switch_6;
        instance SmallerQ smaller_1;
        instance SmallerQ smaller_2;
        instance SmallerQ smaller_3;
        instance SmallerQ smaller_4;
        instance SmallerQ smaller_5;
        instance SmallerQ smaller_6;
        instance And and_1;
        instance And and_2;
        instance And and_3;
        instance And and_4;
        instance And and_5;
        instance EventCatcherB ec1;
        instance EventCatcherB ec2;

        connect const_0.out1 -> switch_last.in2;
        connect active -> switch_last.cond, and_3.in1, and_4.in1;
        connect frontLeftSideSensor -> smaller_1.in2, smaller_4.in1, smaller_6.in1;
        connect frontRightSensor -> smaller_2.in1, smaller_3.in2;
        connect const_5.out1 -> smaller_1.in1;
        connect const_20.out1 -> smaller_2.in2, smaller_3.in1;
        connect smaller_1.out1 -> and_1.in1;
        connect smaller_2.out1 -> and_1.in2;
        connect const_m05.out1 -> switch_1.in1;
        connect const_0.out1 -> switch_1.in2;
        connect and_1.out1 -> switch_1.cond;
        connect smaller_3.out1 -> ec1.in1;
        connect ec1.out1 -> and_2.in1;
        connect backLeftSideSensor -> smaller_4.in2, smaller_6.in2;
        connect smaller_4.out1 -> and_2.in2;
        connect const_05.out1 -> switch_2.in1;
        connect switch_1.out1 -> switch_2.in2;
        connect and_2.out1 -> switch_2.cond;
        connect and_2.out1 -> ec2.in1;
        connect ec2.out1 -> and_3.in2;
        connect const_1.out1 -> switch_3.in1;
        connect const_0.out1 -> switch_3.in2;
        connect and_3.out1 -> switch_3.cond;
        connect switch_3.out1 -> activatePassChecker;
        connect passed -> and_4.in2;
        connect frontRightSideSensor -> smaller_5.in2;
        connect const_9.out1 -> smaller_5.in1;
        connect smaller_5.out1 -> and_5.in1;
        connect and_4.out1 -> and_5.in2, switch_6.cond;
        connect const_05.out1 -> switch_5.in1;
        connect const_m05.out1 -> switch_5.in2;
        connect smaller_6.out1 -> switch_5.cond;
        connect const_1.out1 -> switch_4.in1;
        connect switch_5.out1 -> switch_4.in2;
        connect and_5.out1 -> switch_4.cond;
        connect switch_4.out1 -> switch_6.in1;
        connect switch_2.out1 -> switch_6.in2;
        connect switch_6.out1 -> switch_last.in1;
        connect switch_last.out1 -> steering;
	*/

    implementation Math{
    
    static B overtake0 = 0;
    static B overtake1 = 0;
    steering = 0;
    activatePassChecker = 0;

    if active
        if ((frontLeftSideSensor > 5) && (frontRightSensor < 20))
            steering = -0.5;
        end
        if (frontRightSensor > 20) 
            overtake0 = 1;
        end
        if (overtake0 && (frontLeftSideSensor < backLeftSideSensor))
            steering = 0.5;
            overtake1 = 1;
        end
        if overtake1
            activatePassChecker = 1;
        end
        if passed
            if (frontRightSideSensor > 9)
                steering = 1;
            else
                if (frontLeftSideSensor < backLeftSideSensor)
                    steering = 0.5;
                end
            
                if (frontLeftSideSensor > backLeftSideSensor)
                    steering = -0.5;
                end
            end 
        end
    end
	}
}
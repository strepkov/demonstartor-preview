package controller11;

import VelocityController;
import PassObjectsController;
import ActiveController;
import SearchParkingPlaceController;
import ParkingController;
import controller11.runTrack.RunTrack;
import SteeringAlignController;
import controller11.follow.Follow;
import PassCarController;
import OvertakeController;
import OvertakeVelocityController;
import ObstacleController;
import ObstacleVelocityController;
import VelocitySwitchController;
import SteeringSwitchController;

component MainController{
    ports 
        in Q(-200m:200m) frontLeftSensor,
        in Q(-200m:200m) frontRightSensor,
        in Q(-200m:200m) frontLeftSideSensor,
        in Q(-200m:200m) frontRightSideSensor,
        in Q(-200m:200m) backLeftSideSensor,
        in Q(-200m:200m) backRightSideSensor,
        in Q(-200m:200m) backLeftSensor,
        in Q(-200m:200m) backRightSensor,

        in Q time,
        in Q(0km/h:250km/h) velocity,

        in Q(-200m:200m) xPosition,
        in Q(-200m:200m) yPosition,

        out Q(-2m/s^2:2m/s^2) acceleration,
        out Q(-180:180) steering,
        out B status;


    instance VelocityController velocityController;
    connect velocity->velocityController.velocity;
    connect velocityController.acceleration->velocitySwitch.accelerationLast;

    instance SearchParkingPlaceController searchParkingPlaceController;
    connect frontLeftSideSensor -> searchParkingPlaceController.frontLeftSideSensor;
    connect backLeftSideSensor -> searchParkingPlaceController.backLeftSideSensor;
    connect searchParkingPlaceController.foundPlace -> velocityController.reverseMove;
    connect searchParkingPlaceController.foundPlace -> parkingController.reverseMove;

    
    instance ActiveController activeController;
    connect xPosition -> activeController.xPosition;
    connect yPosition -> activeController.yPosition;
    
    connect activeController.activeSearchParkingPlace -> searchParkingPlaceController.active;
    connect activeController.activeSearchParkingPlace -> velocitySwitch.activeParking;
    connect activeController.activeSearchParkingPlace -> steeringSwitch.activeParking;
    
    connect activeController.activePassObject -> passObjectsController.active;
    connect activeController.activePassObject -> velocitySwitch.activePassObject;
    connect activeController.activePassObject -> steeringSwitch.activePassObject;
    
    connect activeController.activeTrack -> velocitySwitch.activeRunTrack;
    connect activeController.activeTrack -> steeringSwitch.activeTrack;

    connect activeController.activeAlign -> velocitySwitch.activeAlign;
    connect activeController.activeAlign -> steeringSwitch.activeAlign;

    connect activeController.followCar -> velocitySwitch.activeFollow;
    connect activeController.followCar -> steeringSwitch.activeFollow;

    connect activeController.overtakeCar -> overtake.active;
    connect activeController.overtakeCar -> steeringSwitch.activeOvertake;

    connect activeController.obstacleWait -> velocitySwitch.activeObstacle;
    connect activeController.obstacleWait -> steeringSwitch.activeObstacle;


    instance ParkingController parkingController;
    connect frontLeftSensor -> parkingController.frontLeftSensor;
    connect frontRightSensor -> parkingController.frontRightSensor;
    connect frontLeftSideSensor -> parkingController.frontLeftSideSensor;
    connect backLeftSideSensor -> parkingController.backLeftSideSensor;
    connect backLeftSensor -> parkingController.backLeftSensor;
    connect backRightSensor -> parkingController.backRightSensor;
    connect parkingController.status -> status;
    connect parkingController.moveForward -> velocityController.moveForward;
    connect parkingController.steeringAngle -> steeringSwitch.steeringParking;
    
    instance PassObjectsController passObjectsController;
    connect frontLeftSensor -> passObjectsController.frontLeftSensor;
    connect frontRightSensor -> passObjectsController.frontRightSensor;
    connect frontLeftSideSensor -> passObjectsController.frontLeftSideSensor;
    connect frontRightSideSensor -> passObjectsController.frontRightSideSensor;
    connect backLeftSideSensor ->passObjectsController.backLeftSideSensor;
    connect backRightSideSensor -> passObjectsController.backRightSideSensor;
    connect passObjectsController.steering -> steeringSwitch.steeringPassObjects;

    instance RunTrack runTrack;
    connect frontLeftSensor -> runTrack.frontLeft;
    connect frontRightSensor ->  runTrack.frontRight;
    connect frontLeftSideSensor -> runTrack.frontLeftSide;
    connect frontRightSideSensor -> runTrack.frontRightSide;
    connect backLeftSideSensor -> runTrack.backLeftSide;
    connect backRightSideSensor -> runTrack.backRightSide;
    connect runTrack.steering -> steeringSwitch.steeringTrack;
    connect velocity -> runTrack.velocity;
    connect runTrack.acceleration -> velocitySwitch.accelerationRunTrack;

    instance SteeringAlignController steeringAlign;
    connect frontLeftSideSensor -> steeringAlign.frontLeftSide;
    connect frontRightSideSensor -> steeringAlign.frontRightSide;
    connect backLeftSideSensor -> steeringAlign.backLeftSide;
    connect backRightSideSensor -> steeringAlign.backRightSide;
    connect steeringAlign.steering -> steeringSwitch.steeringAlign;

    instance Follow follow;
    connect frontLeftSensor -> follow.frontLeftSensor;
    connect frontRightSensor -> follow.frontRightSensor;
    connect velocity -> follow.velocity;
    connect follow.acceleration -> velocitySwitch.accFollow;

    instance PassCarController passCar;
    connect frontRightSideSensor -> passCar.frontRightSideSensor;
    connect backRightSideSensor -> passCar.backRightSideSensor;
    connect passCar.done -> overtake.passed;

    instance OvertakeController<50m> overtake;
    connect frontLeftSensor -> overtake.frontLeftSensor;
    connect frontRightSensor -> overtake.frontRightSensor;
    connect frontRightSideSensor -> overtake.frontRightSideSensor;
    connect frontLeftSideSensor -> overtake.frontLeftSideSensor;
    connect backLeftSideSensor -> overtake.backLeftSideSensor;
    connect backRightSideSensor -> overtake.backRightSideSensor;
    connect overtake.steering -> steeringSwitch.steeringOvertake;
    connect overtake.activatePassChecker -> passCar.active;
    connect overtake.activatePassChecker -> velocitySwitch.activeOvertake;

    instance OvertakeVelocityController overtakeVelocity;
    connect velocity -> overtakeVelocity.velocity;
    connect overtakeVelocity.acceleration -> velocitySwitch.accOvertake;

    instance ObstacleController<30m> obstacle;
    connect frontLeftSensor -> obstacle.frontLeftSensor;
    connect frontRightSensor -> obstacle.frontRightSensor;
    connect obstacle.brake -> obstacleVelocity.brake;

    instance ObstacleVelocityController<5m/s> obstacleVelocity;
    connect velocity -> obstacleVelocity.velocity;
    connect obstacleVelocity.acceleration -> velocitySwitch.accObstacle;

    instance SteeringSwitchController steeringSwitch;
    connect steeringSwitch.steering -> steering;

    instance VelocitySwitchController velocitySwitch;
    connect velocitySwitch.acceleration -> acceleration; 
}